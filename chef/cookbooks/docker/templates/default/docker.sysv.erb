#!/bin/sh
#
#       /etc/rc.d/init.d/docker
#
#       Daemon for docker.io
#
# chkconfig:   2345 95 95
# description: Daemon for docker.io

### BEGIN INIT INFO
# Provides:       docker
# Required-Start: $network cgconfig
# Required-Stop:
# Should-Start:
# Should-Stop:
# Default-Start: 2 3 4 5
# Default-Stop:  0 1 6
# Short-Description: start and stop docker
# Description: Daemon for docker.io
### END INIT INFO

# Source function library.
. /etc/rc.d/init.d/functions

exec="<%= Helpers::Docker.executable(node) %>"
prog="docker"
<% if node['docker']['pidfile'] -%>
pidfile="<%= node['docker']['pidfile'] %>"
<% else -%>
pidfile="/var/run/$prog.pid"
<% end -%>
lockfile="/var/lock/subsys/$prog"
<% if node['docker']['logfile'] -%>
logfile="<%= node['docker']['logfile'] %>"
<% else -%>
logfile="/var/log/$prog"
<% end -%>

[ -e /etc/sysconfig/$prog ] && . /etc/sysconfig/$prog

prestart() {
    service cgconfig status > /dev/null

    if [[ $? != 0 ]]; then
        service cgconfig start
    fi

    preexec="/sbin/sysctl"
    [ -x $preexec ] || exit 6
    <% if node['docker']['ipv4_forward'] -%>
    $preexec -w net.ipv4.ip_forward=1 > /dev/null 2>&1
    <% end -%>
    <% if node['docker']['ipv6_forward'] -%>
    $preexec -w net.ipv6.conf.all.forwarding=1 > /dev/null 2>&1
    <% end -%>
}

start() {
    [ -x $exec ] || exit 5

    if ! [ -f $pidfile ]; then
        prestart
        printf "Starting $prog:\t"
        echo "\n$(date)\n" >> $logfile
        $exec -d $DOCKER_OPTS &>> $logfile &
        pid=$!
        touch $lockfile
        success
        echo
    else
        failure
        echo
        printf "$pidfile still exists...\n"
        exit 7
    fi
}

stop() {
    echo -n $"Stopping $prog: "
    killproc -p $pidfile $prog
    retval=$?
    echo
    [ $retval -eq 0 ] && rm -f $lockfile
    return $retval
}

restart() {
    stop
    start
}

reload() {
    restart
}

force_reload() {
    restart
}

rh_status() {
    status -p $pidfile $prog
}

rh_status_q() {
    rh_status >/dev/null 2>&1
}

case "$1" in
    start)
        rh_status_q && exit 0
        $1
        ;;
    stop)
        rh_status_q || exit 0
        $1
        ;;
    restart)
        $1
        ;;
    reload)
        rh_status_q || exit 7
        $1
        ;;
    force-reload)
        force_reload
        ;;
    status)
        rh_status
        ;;
    condrestart|try-restart)
        rh_status_q || exit 0
        restart
        ;;
    *)
        echo $"Usage: $0 {start|stop|status|restart|condrestart|try-restart|reload|force-reload}"
        exit 2
esac

exit $?
